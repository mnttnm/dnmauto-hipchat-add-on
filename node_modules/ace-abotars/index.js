var fs = require("fs");
var http = require("http");
var zlib = require("zlib");
var util = require('util');
var _ = require('lodash');
var ABOTARS_HOST = "abotars.herokuapp.com";
var avatar_id_file = 'ace_abotars.id';

module.exports = function (addon, app) {
    var resourceName = _.get(addon.config,'avatarFileName', _.constant("avatar.png"))();
    var resourceExpiry = _.get(addon.config, 'avatarExpiryTime',_.constant(60 * 60 * 24))();
    var avatarId = _.get(addon.config, 'avatarId', _.constant(addon.key))();
    var avatarSync = _.get(addon.config, 'avatarSync', _.constant(true))();
    _.set(addon.descriptor, 'capabilities.hipchatApiConsumer.avatar', addon.config.localBaseUrl() + "/avatar");

    var oldAvatar = null;
    if (fs.existsSync(avatar_id_file)) {
        oldAvatar = fs.readFileSync(avatar_id_file, 'utf-8');
    }

    if ((avatarSync && oldAvatar !== avatarId) || ! fs.existsSync(resourceName)) {
        var cause = addon.config.avatarId ? "avatar_id" : "plugin key";
        addon.logger.info(util.format("[ace-abotars] Hi! I am using your %s \"%s\" to generate an avatar for your addon.", cause, avatarId));
        addon.logger.info("[ace-abotars] Not a fan of it? Visit http://abotars.hipch.at/designer/ to find one you like"
                 + " and add the id into your config as avatar_id.");
        addon.logger.info("[ace-abotars] Have your own? You can replace the avatar.png in the root of your project.");
        addon.logger.info(util.format("[ace-abotars] Remember to add %s and %s to git.", resourceName, avatar_id_file));


        var request_options = {
            hostname: ABOTARS_HOST,
            port: 80,
            path: '/bot/' + avatarId + '.png',
            method: 'GET',
            headers: {
                "Accept-Encoding": "gzip"
            }
        };

        http.get(request_options, function (response) {
            if (response.statusCode !== 200) {
                throw new Error("Error fetching bot - maybe invalid id");
            } else {
                var z = zlib.createGunzip();
                var file = fs.createWriteStream(resourceName);
                response.pipe(z).pipe(file);
                fs.writeFileSync(avatar_id_file, avatarId, 'utf-8');
            }
        });
    }


    app.get("/avatar", function (req, res) {
        if (app.settings.env === "production") {
            res.set("Cache-Control", "public max-age=" + resourceExpiry);
        }

        res.sendFile(resourceName, {root: process.cwd()});
    });
};
