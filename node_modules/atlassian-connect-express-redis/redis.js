var url = require('url');
var RSVP = require('rsvp');
var redis = require("redis");

function Redis(logger, opts) {
    opts = opts || {
        url: 'redis://localhost:6379'
    };
    if (opts.url === '$DATABASE_URL') {
        opts.url = process.env.DATABASE_URL;
    };
    var self = this;
    var connectUrl = url.parse(opts.url);
    var pwd = null;
    if(connectUrl.auth) {
        pwd = connectUrl.auth.split(':')[1];
    }
    self.client = redis.createClient(connectUrl.port, connectUrl.hostname, {
        auth_pass: pwd
    });
}

var proto = Redis.prototype;

function redisKey(key, clientKey){
    return [clientKey, key].join(':');
}

proto.get = function(key, clientKey){
    var self = this;
    var promise = new RSVP.Promise(function(resolve, reject){
        self.client.get(redisKey(key,clientKey), function(err, res){
            if (!err) {
                resolve(JSON.parse(res));
            } else {
                reject(err);
            };
        });
    });
    return promise;
}

proto.set = function(key, val, clientKey){
    var self = this;
    var sval = JSON.stringify(val, null, 2);
    var promise = new RSVP.Promise(function(resolve, reject){
        self.client.set(redisKey(key,clientKey), sval, function(err, res){
            if (!err) {
                resolve(res);
            } else {
                reject(err);
            };
        });
    });
    return promise;
}

proto.del = function(key, clientKey){
    var self = this;
    var promise = new RSVP.Promise(function(resolve, reject){
        self.client.del(redisKey(key,clientKey), function(err, res){
            if (!err) {
                resolve(res);
            } else {
                reject(err);
            };
        });
    });
    return promise;
}

module.exports = function(logger, opts) {
    return new Redis(logger, opts);
}